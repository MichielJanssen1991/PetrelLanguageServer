{ 
	"element": "",									// xml definition of the element
	"description": "",								// documentation
	"check-obsolete": false,						// when element calls another element (e.g. Action) check whether item is obsolete or not can be enabled. Default is false.
	"attributes": [									// possible element attributes (each attribute can appear only once)
		{
			"name": "",
			"description": "",						// documentation
			"required": false,						// whether attribute is required or not. Default is false
			"validations": [
				{
					"type": "",						// options: regex, ...
					"value": "",					// (regex, ... ) value to match
					"message": "",					// validation message
					"level": ""						// none, info, warning, error, fatal
				}
			],
			"types": [								// if multiple options are needed like enum & relation
				{
					"type": "",						// options: enum, relation, path ...
					"relation-to": "",				// if type is 'relation'. Options: backend-types, backend-rules, backend-actions
													// (to specify or display order) backend-types-recent, backend-types-namespace, backend-types-workspace, backend-types-platform
					"namespaced": false, 			// true or false whether the relation-to items need to be namespaced or not. Default is false
					"path-hints": [
						{
							"name": "",				// path hint option
							"description": ""		// documentation
						},
					],
					"options": [					// if type is 'enum'. options to specify type-options
						{
							"name": "",				// name and/or value of the option
							"description": "" 		// documentation
						}
					],
				}
			],
			"conditions": [							// whether an attribute is visible or not
				{
					"attribute": "", 				// attribute name
					"condition": "",				// options: ==, !=, contains, ...
					"value": ""						// values to match the attribute. This could be a variable like: 
													// - @backend-actions.attribute-rule (array of backend action names which require a rule attribute)
													// - @backend-actions.attribute-type (array of backend action names which require a type attribute)
													// - @backend-actions.attribute-typename (array of backend action names which require a type attribute)
				}
			]
		}		
	],
	"childs":[										// possible child elements
		{
			"element": "",
			"occurence": "once"						// options: multiple, once. Default is multiple
		}
	],
	"parents":[										// should we define parents too????

	]
} 



// to make sure not all backend-/frontend- actions are redefined in json format json will point to the xml definition files
// the notation will be like:

"attributes"																		// loop @backend-actions.attributes
[
	{
		"name": "@backend-actions.attribute",
		"description": "@backend-actions.annotation.documentation.summary",
		"required": "@backend-actions.attribute[required]",
		"types": [
			{
				"type": "@backend-actions.attribute[type]",
				"options": [														// loop @backend-actions.attributes
					{
						"name": "@backend-actions.attribute.option[value]",
						"documentation": "@backend-actions.attribute.option[comment]"
					}
				]						
			}
		],
		"conditions": [
			{
				"attribute": "action",
				"condition": "contains",
				"value": "@backend-actions.name"
			}
		]		
	}
]